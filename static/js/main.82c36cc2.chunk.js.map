{"version":3,"sources":["redux/users/selectors.js","redux/users/actiontypes.js","redux/users/actions.js","component/header/index.jsx","component/custom-button/index.js","redux/robots/actiontypes.js","component/cards/user-card/index.jsx","redux/robots/actions.js","component/list/card-list/index.jsx","component/search-box/index.jsx","pages/home/index.jsx","component/form-input/index.jsx","component/signin/index.jsx","component/sign-Up/index.jsx","pages/Sign-in-Sign-up/index.jsx","component/add-record/index.js","pages/add/index.js","App.js","serviceWorker.js","redux/robots/reducer.js","redux/users/reducer.js","globals/redux/rootReducer/index.js","firebase/firebase.utils.js","redux/robots/saga.js","redux/users/saga.js","globals/redux/rootSaga/index.js","globals/redux/store/index.js","index.js"],"names":["selectCurrentUser","createSelector","state","users","currentUser","UserActionTypes","SET_CURRENT_USER","GOOGLE_SIGN_IN_START","EMAIL_SIGN_IN_START","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","CHECK_USER_SESSION","SIGN_OUT_START","SIGN_OUT_SUCCESS","SIGN_OUT_FAILURE","SIGN_UP_START","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signInFailure","error","type","payload","signUpSuccess","user","additionalData","mapStateToProps","createStructuredSelector","connect","dispatch","signOutStart","className","to","onClick","CustomButton","children","isGoogleSignIn","othProps","FETCH_ROBOTS_START","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTSFAILURE","ADD_ROBOTS_START","ADD_ROBOTS_SUCCESS","ADD_ROBOTS_FAILURE","DELETE_ROBOTS_START","Card","index","items","useDispatch","handleDeletebutton","errorMessage","Id","id","alt","src","name","email","UserCardList","searchData","Object","keys","map","robot","key","SearchBox","placeholder","handleChange","value","onChange","HomePage","useState","searchbox","SetSearchBox","filterData","SetFilterData","useSelector","robots","robotsList","filteredRobots","text","a","allowed","filter","toLowerCase","includes","toLocaleLowerCase","filtered","reduce","obj","event","target","FormInput","label","console","log","length","Signin","props","handleSubmit","preventDefault","emailSignInStart","password","setState","this","googleSignInStart","onSubmit","required","Component","Signup","signUpStart","displayName","confirmPassword","alert","userCredentials","SignInSignUpPage","Addrecord","addRobotsStart","username","Addrecords","App","unsubscribeFormAuth","searchField","checkUserSession","exact","path","component","render","Boolean","window","location","hostname","match","INITIAL_STATE","isFetching","undefined","userReducer","action","FETCH_ROBOTS_FAILURE","combineReducers","robotsReducers","userReducers","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","userRef","firestore","doc","uid","get","exists","createdAt","Date","set","message","convertCollectionsSnapshotToMap","collections","docs","data","accumulator","collection","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","fetchCollectionsAsnyc","registerobots","deleteRobotRecords","fetchRobotsrStart","registerrobotstart","deleterobotStart","robotSaga","robotscollection","snapshot","call","collectionMap","put","add","delete","takeEvery","all","getSnapshotFromUserAuth","signInWithGoogle","signInWithEmail","isUserAuthenticated","signOut","signUp","signInAfterSignUp","onGoogleSignInStart","onEmailSignInStart","onCheckUserSession","onSignOutStart","onSignUpStart","onSignUpSuccess","userSaga","userSnapshot","signInWithPopup","signInWithEmailAndPassword","Promise","resolve","reject","unsubscribe","onAuthStateChanged","createUserWithEmailAndPassword","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","middleWares","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.82c36cc2.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectUser = state => state.users;\n\nexport const selectCurrentUser = createSelector(\n  [selectUser],\n  users => users.currentUser\n);","\nconst UserActionTypes = {\n    SET_CURRENT_USER: 'SET_CURRENT_USER',\n    GOOGLE_SIGN_IN_START: 'GOOGLE_SIGN_IN_START',\n    EMAIL_SIGN_IN_START: 'EMAIL_SIGN_IN_START',\n    SIGN_IN_SUCCESS: 'SIGN_IN_SUCCESS',\n    SIGN_IN_FAILURE: 'SIGN_IN_FAILURE',\n    CHECK_USER_SESSION: 'CHECK_USER_SESSION',\n    SIGN_OUT_START: 'SIGN_OUT_START',\n    SIGN_OUT_SUCCESS: 'SIGN_OUT_SUCCESS',\n    SIGN_OUT_FAILURE: 'SIGN_OUT_FAILURE',\n    SIGN_UP_START: 'SIGN_UP_START',\n    SIGN_UP_SUCCESS: 'SIGN_UP_SUCCESS',\n    SIGN_UP_FAILURE: 'SIGN_UP_FAILURE'\n  };\n  export default UserActionTypes;  ","import UserActionTypes from './actiontypes';\n\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START\n});\n\nexport const signInSuccess = user => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: user\n});\n\nexport const signInFailure = error => ({\n  type: UserActionTypes.SIGN_IN_FAILURE,\n  payload: error\n});\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword\n});\n\nexport const checkUserSession = () => ({\n  type: UserActionTypes.CHECK_USER_SESSION\n});\n\nexport const signOutStart = () => ({\n  type: UserActionTypes.SIGN_OUT_START\n});\n\nexport const signOutSuccess = () => ({\n  type: UserActionTypes.SIGN_OUT_SUCCESS\n});\n\nexport const signOutFailure = error => ({\n  type: UserActionTypes.SIGN_OUT_FAILURE,\n  payload: error\n});\n\nexport const signUpStart = userCredentials => ({\n  type: UserActionTypes.SIGN_UP_START,\n  payload: userCredentials\n});\n\nexport const signUpSuccess = ({ user, additionalData }) => ({\n  type: UserActionTypes.SIGN_UP_SUCCESS,\n  payload: { user, additionalData }\n});\n\nexport const signUpFailure = error => ({\n  type: UserActionTypes.SIGN_UP_FAILURE,\n  payload: error\n});","import React from 'react';\nimport './styles.scss';\nimport {Link} from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/users/selectors';\nimport { signOutStart } from '../../redux/users/actions';\nimport {connect} from 'react-redux';\n\nconst Header=({currentUser,signOutStart})=>{\n    return(\n        <div className=\"header\">\n            <div className='options'>\n                <Link className='option' to=\"/\">\n                    HOME\n                </Link>\n                {\n                    currentUser ? \n                    <>\n                    <Link className='option' to=\"/add\">\n                        ADD RECORDS\n                    </Link>\n                <div className=\"option\" onClick={signOutStart}>SIGN OUT</div>\n                    </>\n\n                    :\n                    <Link className=\"option\" to=\"/signin\">SIGN IN</Link>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n});\nconst mapDispatchToProps = dispatch => ({\n    signOutStart: () => dispatch(signOutStart())\n  });\n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Header);","import React from 'react';\nimport './styles.scss';\n\nconst CustomButton=({children,isGoogleSignIn,...othProps})=>{\n    return(\n       <button className={`${isGoogleSignIn ? 'google-sign-in' : ''} custom-button`} {...othProps}>\n           {children}\n       </button> \n    )\n}\nexport default CustomButton;","export const UserActionTypes={\n    FETCH_ROBOTS_START:'FETCH_ROBOTS_START',\n    FETCH_ROBOTS_SUCCESS:'FETCH_ROBOTS_SUCCESS',\n    FETCH_ROBOTSFAILURE:'FETCH_ROBOTS_FAILURE',\n    ADD_ROBOTS_START:'ADD_ROBOTS_START',\n    ADD_ROBOTS_SUCCESS:'ADD_ROBOTS_SUCCESS',\n    ADD_ROBOTS_FAILURE:'ADD_ROBOTS_FAILURE',\n    DELETE_ROBOTS_START:'DELETE_ROBOTS_START',\n}","import React from 'react';\nimport './styles.css';\nimport CustomButton from '../../custom-button';\nimport {useDispatch} from 'react-redux';\nimport { deleterobotStart } from '../../../redux/robots/actions';\nexport const Card=({index,items,children})=>{\n    const dispatch=useDispatch();\n    const handleDeletebutton=(items)=>{\n        dispatch(deleterobotStart({Id:items.id}))\n    }\n    return (\n        <div className=\"card-container\">\n            <img alt=\"robots\" src={`https://robohash.org/${index}?set=set2&size=180x180`} />\n            <h2>{items.name}</h2>\n            <p>{items.email}</p>\n            <p>\n            <CustomButton onClick={()=>handleDeletebutton(items)}> DELETE</CustomButton>\n            </p>\n       \n        </div>\n    )\n}","import {UserActionTypes} from  './actiontypes';\n\nexport const fetchRobotsStart = () =>({\n    type:UserActionTypes.FETCH_ROBOTS_START,\n})\n\nexport const fetchRobotsSuccess = user =>({\n    type:UserActionTypes.FETCH_ROBOTS_SUCCESS,\n    payload: user,\n})\n\nexport const fetchRobotsFailure = errorMessage =>({\n    type:UserActionTypes.FETCH_ROBOTS_FAILURE,\n    payload: errorMessage,\n})\n\nexport const addRobotsStart = payload =>({\n    type:UserActionTypes.ADD_ROBOTS_START,\n    payload: payload,\n})\n\nexport const addRobotsSuccess = errorMessage =>({\n    type:UserActionTypes.ADD_ROBOTS_SUCCESS,\n    payload: errorMessage,\n})\n\nexport const addRobotsFailure= errorMessage =>({\n    type:UserActionTypes.ADD_ROBOTS_FAILURE,\n    payload: errorMessage,\n})\n\nexport const deleterobotStart = errorMessage =>({\n    type:UserActionTypes.DELETE_ROBOTS_START,\n    payload: errorMessage,\n})","import React from 'react';\nimport './styles.css';\nimport {Card} from '../../cards/user-card';\n\n\nconst UserCardList=({searchData})=>{\n    return(\n    <div className=\"card-list\">\n        { Object.keys(searchData).map((robot,index)=>\n          <Card key={index} items={searchData[robot]} index={index} />\n        )}\n    </div>\n\n    )\n}\n\n\nexport default UserCardList;","import React from 'react';\nimport './styles.css';\n\nexport const SearchBox=({placeholder,handleChange,value})=>{\n    return(\n        <input className='search' type='search' placeholder={placeholder} onChange={handleChange} value={value}/>\n\n    )\n}","import React, {useState} from 'react';\nimport UserCardList from '../../component/list/card-list';\nimport {SearchBox} from '../../component/search-box';\nimport {useDispatch, useSelector } from 'react-redux';\nimport {fetchRobotsStart} from '../../redux/robots/actions';\nimport './styles.scss';\n\nconst HomePage=()=>{\n    const [searchbox,SetSearchBox]=useState(null);\n    const [filterData,SetFilterData]=useState([]);\n    const dispatch=useDispatch();\n    const currentUser = useSelector(state => state.robots.robotsList);\n    useState(() => {\n      // setData(authStore.experience)\n      dispatch(fetchRobotsStart());\n    }, []);\n    \n    const filteredRobots =async(text) =>{\n    //   SetFilterData( currentUser.filter(user=>\n    //     user.name.toLowerCase().includes(text.toLocaleLowerCase())))\n\n\n    // SetFilterData(Object.keys(currentUser).filter(key=>{\n    //         return currentUser[key].name.toLowerCase().includes(text.toLocaleLowerCase())\n    //     }))\n\n      const allowed = Object.keys(currentUser).filter(key=>{\n                 return currentUser[key].name.toLowerCase().includes(text.toLocaleLowerCase())\n        })\n        const filtered = Object.keys(currentUser)\n        .filter(key => allowed.includes(key))\n        .reduce((obj, key) => {\n          obj[key] = currentUser[key];\n          return obj;\n        }, {});\n\n        SetFilterData(filtered);\n    }\n \n    return(\n    <div className='homepage'>\n        <h1>Robotex Inc</h1>\n        <SearchBox \n          placeholder={'search robbots'}\n          handleChange={(event)=>{\n            SetSearchBox(event.target.value)\n            filteredRobots(event.target.value)\n            }}\n          value={searchbox} \n        />\n        <UserCardList searchData={searchbox ? filterData : currentUser}/>\n\n    </div>\n    )\n}\n\n\nexport default HomePage;","import React from 'react';\nimport './styles.scss';\n\nconst FormInput=({handleChange,label,...othProps})=>{\n    console.log('labelsss',label)\n    return(\n        <div className=\"group\">\n            <input className='form-input' onChange={handleChange} {...othProps}/>\n\n            {\n                label && (\n                    <label className={`${othProps.value.length ? 'shrink':''} form-input-label`}>\n                        {label}\n                    </label>\n                )\n            }\n        </div>\n    )\n}\n\nexport default FormInput;","import React,{Component} from 'react';\nimport './styles.scss';\nimport FormInput from '../form-input';\nimport CustomButton from '../custom-button';\n\nimport { connect } from 'react-redux';\nimport {\n    googleSignInStart,\n    emailSignInStart\n  } from '../../redux/users/actions';\n\nclass Signin extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            email:'',\n            password:'',\n        }\n\n    }\n\n    handleSubmit = async event => {\n        event.preventDefault();\n        const { emailSignInStart } = this.props;\n        const { email, password } = this.state;\n    \n        emailSignInStart(email, password);\n      };\n\n    handleChange=event=>{\n        const{value,name}=event.target;\n\n        this.setState({[name]:value})\n    }\n    render(){\n        const{email,password}=this.state;\n        const { googleSignInStart } = this.props;\n        return(\n            <div className=\"sign-in\">\n                <h2>I already have an account</h2>\n                <span>Sign in with your email and password</span>\n\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput label=\"email\" name=\"email\" type=\"email\" value={email} required handleChange={this.handleChange}/>\n                    <FormInput label=\"password\" name=\"password\" type=\"password\" value={password} required handleChange={this.handleChange}/>\n\n                    <div className=\"buttons\">\n                    <CustomButton type=\"submit\">\n                        Sign In\n                    </CustomButton>\n\n                    <CustomButton onClick={googleSignInStart} isGoogleSignIn>\n                        Sign In with google\n                    </CustomButton>\n\n                    </div>\n        \n                </form>\n            </div>\n        )\n    }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) =>\n      dispatch(emailSignInStart({ email, password }))\n  });\n  \n  export default connect(\n    null,\n    mapDispatchToProps\n  )(Signin);\n// export default Signin;","import React,{Component} from 'react';\nimport FormInput from '../form-input';\nimport CustomButton from '../custom-button';\nimport { signUpStart } from '../../redux/users/actions';\nimport { connect } from 'react-redux';\nimport './styles.scss';\n\nclass Signup extends Component{\n    constructor(){\n        super();\n\n        this.state={\n            displayName:'',\n            email: '',\n            password:'',\n            confirmPassword:'',\n        }\n    }\n\n    handleSubmit=async event=>{\n        event.preventDefault();\n        const { signUpStart } = this.props;\n        const { displayName, email, password, confirmPassword } = this.state;\n    \n        if (password !== confirmPassword) {\n          alert(\"passwords don't match\");\n          return;\n        }\n    \n        signUpStart({ displayName, email, password });\n    }\n\n    handleChange=event=>{\n        const {name, value}=event.target;\n\n        this.setState({[name]:value});\n    }\n    render(){\n        const {displayName,email,password,confirmPassword}=this.state;\n        return(\n            <div className='sign-up'>\n                <h2 className='title'>I do not have an account</h2>\n                <span>Sign up with your email and password</span>\n            <form className='sign-up-form' onSubmit={this.handleSubmit}>\n                <FormInput\n                    type='text'\n                    name ='displayName'\n                    value={displayName}\n                    onChange={this.handleChange}\n                    label='Display Name'\n                    required\n                />\n                <FormInput\n                    type='text'\n                    name ='email'\n                    value={email}\n                    onChange={this.handleChange}\n                    label='Emai'\n                    required\n                />\n                <FormInput\n                    type=\"password\" \n                    name ='password'\n                    value={password}\n                    onChange={this.handleChange}\n                    label='Password'\n                    required\n                />\n\n                <FormInput\n                   type=\"password\" \n                    name ='confirmPassword'\n                    value={confirmPassword}\n                    onChange={this.handleChange}\n                    label='Confirm Password'\n                    required\n                />\n                <CustomButton type='submit'> SIGN UP</CustomButton>\n            </form>\n            </div>\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n  });\n  \n  export default connect(\n    null,\n    mapDispatchToProps\n  )(Signup);","import React from 'react';\nimport './styles.scss';\nimport Signin from '../../component/signin';\nimport SignUp from '../../component/sign-Up';\nconst SignInSignUpPage=()=>{\n    return(\n        <div className=\"sign-in-sign-up\">\n            <Signin />\n            <SignUp />\n        </div>\n    )\n}\n\nexport default SignInSignUpPage;","import React,{Component} from 'react';\nimport FormInput from '../form-input';\nimport CustomButton from '../custom-button';\nimport { addRobotsStart } from '../../redux/robots/actions';\nimport { connect } from 'react-redux';\nimport './styles.scss';\n\nclass Addrecord extends Component{\n    constructor(){\n        super();\n\n        this.state={\n            displayName:'',\n            email: '',\n            username:'',\n        }\n    }\n\n    handleSubmit=async event=>{\n        event.preventDefault();\n        const{addRobotsStart}=this.props;\n        const { displayName, email, username } = this.state;\n        try{\n            addRobotsStart({email,\n                name:displayName,\n                username})\n            \n                this.setState({\n                    displayName:'',\n                    email: '',\n                    username:'',\n                })\n        }catch(error){\n            \n        }\n\n    }\n\n    handleChange=event=>{\n        const {name, value}=event.target;\n\n        this.setState({[name]:value});\n    }\n    render(){\n        const {displayName,email,username}=this.state;\n        return(\n            <div className='sign-up'>\n                <h2 className='title'>I do not have an account</h2>\n                <span>Sign up with your email and password</span>\n            <form className='sign-up-form' onSubmit={this.handleSubmit}>\n                <FormInput\n                    type='text'\n                    name ='displayName'\n                    value={displayName}\n                    onChange={this.handleChange}\n                    label='Display Name'\n                    required\n                />\n                <FormInput\n                    type='text'\n                    name ='username'\n                    value={username}\n                    onChange={this.handleChange}\n                    label='Username'\n                    required\n                />\n           \n                <FormInput\n                    type='text'\n                    name ='email'\n                    value={email}\n                    onChange={this.handleChange}\n                    label='Email'\n                    required\n                />\n                <CustomButton type='submit'> SAVE </CustomButton>\n            </form>\n            </div>\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    addRobotsStart: robots => dispatch(addRobotsStart(robots))\n  });\n  \n  export default connect(\n    null,\n    mapDispatchToProps\n  )(Addrecord);","import React from 'react';\nimport './styles.scss';\nimport Addrecord from '../../component/add-record';\nconst Addrecords=()=>{\n    return(\n        <div className=\"add-robot-record\">\n            <Addrecord />\n        </div>\n    )\n}\n\nexport default Addrecords;","import React,{Component} from 'react';\nimport './App.css';\nimport {Switch,Route,Redirect} from 'react-router-dom';\nimport Header from './component/header';\nimport HomePage from './pages/home';\nimport SignInSignUpPage from './pages/Sign-in-Sign-up';\nimport Addrecord from './pages/add';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { checkUserSession } from './redux/users/actions';\nimport { selectCurrentUser } from './redux/users/selectors';\n// import { setCurrentUser } from  './redux/users/actions';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      robots:[],\n      searchField:'',\n    }\n  }\n  unsubscribeFormAuth=null;\n\n  componentDidMount(){\n    const { checkUserSession } = this.props;\n    checkUserSession();\n\n  }\n  componentWillUnmount(){\n    this.unsubscribeFormAuth()\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route exact path='/add' component={Addrecord} />\n          <Route\n            exact\n            path='/signin'\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to='/' />\n              ) : (\n                <SignInSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// export default App;\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {UserActionTypes} from  './actiontypes';\n\nconst INITIAL_STATE={\n    robotsList: [] ,\n    isFetching: false,\n    errorMessage: undefined\n}\n\nconst userReducer=(state=INITIAL_STATE, action)=>{\n    switch(action.type){\n        case UserActionTypes.FETCH_ROBOTS_START:\n            return {\n              ...state,\n              isFetching: true\n            };\n        case UserActionTypes.FETCH_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                isFetching: false,\n                robotsList:action.payload\n            }\n        case UserActionTypes.FETCH_ROBOTS_FAILURE:\n            return {\n                ...state,\n            errorMessage:action.payload,\n            isFetching: false,\n        }\n            \n        default:\n            return state;\n    }\n}   \n\nexport default userReducer;","import UserActionTypes from  './actiontypes';\n\nconst INITIAL_STATE = {\n    currentUser: null,\n    error: null\n  };\n  \n  const userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case UserActionTypes.SIGN_IN_SUCCESS:\n        return {\n          ...state,\n          currentUser: action.payload,\n          error: null\n        };\n      case UserActionTypes.SIGN_OUT_SUCCESS:\n        return {\n          ...state,\n          currentUser: null,\n          error: null\n        };\n      case UserActionTypes.SIGN_IN_FAILURE:\n      case UserActionTypes.SIGN_OUT_FAILURE:\n      case UserActionTypes.SIGN_UP_FAILURE:\n        return {\n          ...state,\n          error: action.payload\n        };\n      default:\n        return state;\n    }\n  }; \n\nexport default userReducer;","import {combineReducers} from 'redux';\n\nimport robotsReducers from '../../../redux/robots/reducer';\nimport userReducers from '../../../redux/users/reducer';\n\nexport default combineReducers({\n    robots:robotsReducers,\n    users:userReducers,\n});","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config={\n    apiKey: \"AIzaSyBQGoBVgwsa8qfMtL9T7xfzMngAuMMZOXs\",\n    authDomain: \"robotflex-a8aed.firebaseapp.com\",\n    databaseURL: \"https://robotflex-a8aed.firebaseio.com\",\n    projectId: \"robotflex-a8aed\",\n    storageBucket: \"robotflex-a8aed.appspot.com\",\n    messagingSenderId: \"96820919092\",\n    appId: \"1:96820919092:web:ece9d7a855a3ef620fc361\",\n    measurementId: \"G-PZ5LLKTTT3\"\n  };\n\nfirebase.initializeApp(config);\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { email, name,username } = doc.data();\n\n    return {\n      email,\n      name,\n      username,\n      id:doc.id,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.name.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;","import {put, takeEvery,call,all} from 'redux-saga/effects';\nimport {UserActionTypes} from './actiontypes';\nimport {fetchRobotsSuccess,fetchRobotsFailure} from './actions';\nimport {\n    firestore,\n    convertCollectionsSnapshotToMap\n  } from '../../firebase/firebase.utils';\n\nexport function* fetchCollectionsAsnyc(){\n    try{\n        const robotscollection=firestore.collection('robots');\n        const snapshot = yield robotscollection.get();\n        const collectionMap=yield call(\n            convertCollectionsSnapshotToMap,\n            snapshot\n          );\n        \n       yield console.log('collectionMap',collectionMap)\n         yield put(fetchRobotsSuccess(collectionMap));\n        // const fetchData=yield fetch('https://jsonplaceholder.typicode.com/users')\n        \n        // const  data =yield fetchData.json();\n       \n        //  console.log('data',data);\n    }catch(error){\n        fetchRobotsFailure(error.message);\n    }\n\n}\n\nexport function* registerobots({ payload: { email,name,username } }) {\n    try {\n         yield firestore.collection('robots').add({\n            email,\n            name,\n            username,\n        });\n        // yield put(signUpSuccess({ user, additionalData: { displayName } }));\n      } catch (error) {\n        // yield put(signUpFailure(error));\n      }\n}\n\nexport function* deleteRobotRecords({ payload}) {\n    try {\n        yield console.log('idddd',payload.Id)\n        yield firestore.collection('robots').doc(payload.Id).delete()\n        yield call(fetchCollectionsAsnyc);\n        // const { user } = yield firestore.collection('robots').add({\n        //     email,\n        //     name,\n        //     username,\n        // });\n        // yield put(signUpSuccess({ user, additionalData: { displayName } }));\n      } catch (error) {\n        console.log('errorsss',error)\n      }\n}\n\nexport function* fetchRobotsrStart(){\n    yield takeEvery(UserActionTypes.FETCH_ROBOTS_START,fetchCollectionsAsnyc);\n}\n\nexport function* registerrobotstart(){\n    yield takeEvery(UserActionTypes.ADD_ROBOTS_START,registerobots);\n}\n\nexport function* deleterobotStart(){\n    yield takeEvery(UserActionTypes.DELETE_ROBOTS_START,deleteRobotRecords);\n}\nexport function* robotSaga() {\n    yield all([\n        call(fetchRobotsrStart),\n        call(registerrobotstart),\n        call(deleterobotStart),\n        // call(onSignUpStart),\n        // call(onSignUpSuccess)\n    ]);\n}","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './actiontypes';\n\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure\n} from './actions';\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser\n} from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log('userss',user)\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSaga() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess)\n  ]);\n}","import { all, call } from 'redux-saga/effects';\n\nimport {robotSaga} from '../../../redux/robots/saga';\nimport {userSaga} from '../../../redux/users/saga';\n\nexport default function* rootSaga() {\n  yield all([call(robotSaga), call(userSaga)]);\n}","import {\n    createStore,\n    applyMiddleware,\n} from 'redux';\n\nimport rootReducer from '../rootReducer';\nimport rootSaga from '../rootSaga';\nimport createSagaMiddleware from 'redux-saga';\n\n// const middlewares=[logger];\nconst sagaMiddleware = createSagaMiddleware();\nconst middleWares = [sagaMiddleware];\n\nexport const store=createStore(rootReducer,applyMiddleware(...middleWares));\nsagaMiddleware.run(rootSaga);\n// sagaMiddleware.run(fetchRobotsrStart,fetchCurrentUser);\nexport default {store}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from '../src/globals/redux/store';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <Provider store={store} >\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n        </BrowserRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}